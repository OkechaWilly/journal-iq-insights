
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Brain, Lightbulb, TrendingUp, AlertTriangle, Loader2 } from 'lucide-react';
import { useTrades } from '@/hooks/useTrades';
import { calculatePnL } from '@/utils/advancedAnalytics';

export const TradeAnalyzer = () => {
  const { trades } = useTrades();
  const [analysis, setAnalysis] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [analysisType, setAnalysisType] = useState<'recent' | 'strategy' | 'emotional' | 'custom'>('recent');

  const analyzeRecentTrades = async () => {
    setLoading(true);
    const recentTrades = trades.slice(0, 5);
    
    // Simulate AI analysis (replace with actual AI call)
    setTimeout(() => {
      const winRate = recentTrades.filter(t => t.exit_price && calculatePnL(t) > 0).length / recentTrades.filter(t => t.exit_price).length * 100;
      
      const mockAnalysis = `**Recent Trading Analysis (Last 5 Trades)**

üéØ **Performance Summary**
- Win Rate: ${winRate.toFixed(1)}%
- Total Trades Analyzed: ${recentTrades.length}
- Closed Trades: ${recentTrades.filter(t => t.exit_price).length}

üìä **Key Observations**
${winRate > 60 ? 
  '- Strong performance showing good discipline and execution' :
  '- Win rate below optimal - review entry criteria and risk management'
}

üß† **Behavioral Insights**
- Most common emotion: ${getMostCommonEmotion(recentTrades)}
- Risk consistency: ${getConsistencyAnalysis(recentTrades)}

üí° **Recommendations**
1. ${winRate > 60 ? 'Continue current approach, consider position sizing increase' : 'Review entry signals and market conditions'}
2. Focus on ${getMainFocusArea(recentTrades)}
3. Journal daily to maintain discipline

‚ö†Ô∏è **Areas for Improvement**
- ${getImprovementArea(recentTrades)}

*Generated by AI Trade Analyzer*`;

      setAnalysis(mockAnalysis);
      setLoading(false);
    }, 2000);
  };

  const getMostCommonEmotion = (trades: any[]) => {
    const emotions = trades.map(t => t.emotional_state).filter(Boolean);
    if (emotions.length === 0) return 'Not tracked';
    
    const emotionCount = emotions.reduce((acc, emotion) => {
      acc[emotion] = (acc[emotion] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    return Object.entries(emotionCount).sort((a, b) => b[1] - a[1])[0][0];
  };

  const getConsistencyAnalysis = (trades: any[]) => {
    const quantities = trades.map(t => t.quantity).filter(q => q > 0);
    if (quantities.length < 2) return 'Insufficient data';
    
    const avgQuantity = quantities.reduce((sum, q) => sum + q, 0) / quantities.length;
    const variance = quantities.reduce((sum, q) => sum + Math.pow(q - avgQuantity, 2), 0) / quantities.length;
    
    return variance < avgQuantity * 0.1 ? 'Consistent position sizing' : 'Variable position sizing - review risk management';
  };

  const getMainFocusArea = (trades: any[]) => {
    const strategies = trades.map(t => t.tags?.[0]).filter(Boolean);
    if (strategies.length === 0) return 'strategy documentation';
    
    const mostUsed = strategies.reduce((acc, strategy) => {
      acc[strategy] = (acc[strategy] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    return `${Object.entries(mostUsed).sort((a, b) => b[1] - a[1])[0][0]} strategy refinement`;
  };

  const getImprovementArea = (trades: any[]) => {
    const mistakes = trades.map(t => t.notes).filter(n => n?.includes('Mistake')).length;
    if (mistakes > trades.length * 0.3) {
      return 'High mistake frequency - review pre-trade checklist';
    }
    return 'Continue building on current strengths';
  };

  const analyzeStrategy = async () => {
    setLoading(true);
    
    setTimeout(() => {
      const mockAnalysis = `**Strategy Performance Analysis**

üìà **Strategy Breakdown**
- Breakout: 65% win rate (strongest performer)
- Reversal: 45% win rate (needs improvement)
- Trend Following: 58% win rate (consistent)

üéØ **Best Performing Setup**
- Flag patterns showing 70% success rate
- Most profitable during London session

‚ö†Ô∏è **Strategy Concerns**
- Reversal trades often taken too early
- Consider tighter stop losses on breakout failures

üí° **Strategy Recommendations**
1. Increase allocation to breakout setups
2. Practice reversal timing with demo account
3. Document market conditions for each strategy

*AI Strategy Analysis Complete*`;

      setAnalysis(mockAnalysis);
      setLoading(false);
    }, 2500);
  };

  const analysisTips = {
    recent: "Analyze your last 5 trades for patterns, discipline, and execution quality",
    strategy: "Compare performance across different trading strategies and setups",
    emotional: "Understand how your emotional state affects trading performance",
    custom: "Get personalized insights based on your specific trading questions"
  };

  return (
    <Card className="bg-slate-800/50 border-slate-700 backdrop-blur-sm">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <Brain className="w-5 h-5 text-purple-400" />
          AI Trade Analyzer
        </CardTitle>
        <p className="text-slate-400 text-sm">
          Get AI-powered insights about your trading performance and behavior
        </p>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {/* Analysis Type Selection */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-2">
          {(['recent', 'strategy', 'emotional', 'custom'] as const).map((type) => (
            <Button
              key={type}
              variant={analysisType === type ? "default" : "outline"}
              size="sm"
              onClick={() => setAnalysisType(type)}
              className={analysisType === type ? 
                "bg-purple-600 hover:bg-purple-700 text-white" : 
                "bg-slate-700 border-slate-600 text-slate-300 hover:bg-slate-600"
              }
            >
              {type === 'recent' && <TrendingUp className="w-4 h-4 mr-1" />}
              {type === 'strategy' && <Lightbulb className="w-4 h-4 mr-1" />}
              {type === 'emotional' && <AlertTriangle className="w-4 h-4 mr-1" />}
              {type === 'custom' && <Brain className="w-4 h-4 mr-1" />}
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </Button>
          ))}
        </div>

        <div className="text-sm text-slate-400 p-3 bg-slate-700/30 rounded-lg">
          üí° {analysisTips[analysisType]}
        </div>

        {/* Analysis Action */}
        <div className="space-y-3">
          {analysisType === 'recent' && (
            <Button 
              onClick={analyzeRecentTrades}
              disabled={loading || trades.length === 0}
              className="w-full bg-purple-600 hover:bg-purple-700 text-white"
            >
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Analyzing Recent Trades...
                </>
              ) : (
                'Analyze Last 5 Trades'
              )}
            </Button>
          )}

          {analysisType === 'strategy' && (
            <Button 
              onClick={analyzeStrategy}
              disabled={loading || trades.length === 0}
              className="w-full bg-purple-600 hover:bg-purple-700 text-white"
            >
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Analyzing Strategies...
                </>
              ) : (
                'Compare Strategy Performance'
              )}
            </Button>
          )}

          {analysisType === 'custom' && (
            <div className="space-y-3">
              <Textarea
                placeholder="Ask a specific question about your trading... e.g., 'Why do I lose money on Friday afternoons?' or 'How can I improve my risk management?'"
                className="bg-slate-700 border-slate-600 text-white placeholder:text-slate-400 min-h-[80px]"
              />
              <Button 
                disabled={loading}
                className="w-full bg-purple-600 hover:bg-purple-700 text-white"
              >
                Get Custom Analysis
              </Button>
            </div>
          )}
        </div>

        {/* Analysis Results */}
        {analysis && (
          <div className="mt-6 p-4 bg-slate-700/30 rounded-lg border border-slate-600">
            <div className="flex items-center gap-2 mb-3">
              <Badge className="bg-purple-500/10 text-purple-400 border-purple-500/30">
                AI Analysis
              </Badge>
            </div>
            <div className="text-sm text-slate-300 whitespace-pre-line leading-relaxed">
              {analysis}
            </div>
          </div>
        )}

        {trades.length === 0 && (
          <div className="text-center py-8 text-slate-400">
            <Brain className="w-12 h-12 mx-auto mb-3 opacity-50" />
            <p>Add some trades to get AI-powered insights</p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};
